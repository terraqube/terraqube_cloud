# -*- coding: utf-8 -*-
"""
/***************************************************************************
 TerraqubeCloud
                                 A QGIS plugin
 This plugin provides access to hyperspectral images from Terraqube Cloud.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-02-10
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Terraqube S.L.
        email                : arnau@terraqube.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os

from .cloudqube_client import CloudqubeClient
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QDateTime, Qt, QSize
from qgis.PyQt.QtGui import QIcon, QPixmap, QImage, QPainter, QColor
from qgis.PyQt.QtWidgets import QAction, QTableWidgetItem, QHeaderView, QPushButton, QDialogButtonBox, QDialog, QApplication
from qgis.PyQt.QtSvg import QSvgRenderer
from qgis.core import QgsMessageLog, Qgis, QgsPointXY, QgsProject
from qgis.gui import QgsVertexMarker

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .hiperqube_raster_layer import HiperqubeRasterLayer
from .signature_table_widget_item import SignatureTableWidgetItem
from .signature_tool import SignatureTool
from .terraqube_cloud_dialog import TerraqubeCloudDialog
from .upload_hiperqube_dialog import UploadHiperqubeDialog
from .util import get_hdr_filename, get_wavelength_stats, array_str_to_float, format_size
from datetime import datetime, timedelta


THUMB_WIDTH = 256
THUMB_HEIGHT = 256
THUMB_MISSING_RESOURCE = ':/plugins/terraqube_cloud/resources/image.svg'
THUMB_SIZE = QSize(THUMB_WIDTH, THUMB_HEIGHT)
ICON_COLOR = QColor('lightGray')


def get_colored_pixmap(filename, color, size):
    """Returns a colored pixmap of given size."""
    pixmap = QPixmap(filename).scaled(
        size, Qt.KeepAspectRatio, Qt.SmoothTransformation)
    image = QImage(pixmap.width(), pixmap.height(),
                   QImage.Format_ARGB32_Premultiplied)

    image.fill(color)

    painter = QPainter(image)
    painter.setCompositionMode(QPainter.CompositionMode_DestinationIn)
    painter.drawPixmap(0, 0, pixmap)
    painter.end()

    return QPixmap.fromImage(image)


THUMB_MISSING_PIXMAP = get_colored_pixmap(
    THUMB_MISSING_RESOURCE, ICON_COLOR, THUMB_SIZE)


class TerraqubeCloud:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'TerraqubeCloud_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Terraqube Hyperspectral Cloud')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

        # Create necessary variables used during upload
        self.upload_total_size = None
        self.upload_current_size = None
        self.upload_time_started = None

        # Create necessary internal project, hiperqube and signature lists.
        self.hiperqubes = []
        self.hiperqube = None
        self.hiperqube_details = None
        self.signatures = []

        # Stores the temporary filenames created when downloading
        # thumbnails and raster images from hiperqubes
        self.temp_filenames = []

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('TerraqubeCloud', message)

    def add_action(
            self,
            icon_path,
            text,
            callback,
            enabled_flag=True,
            add_to_menu=True,
            add_to_toolbar=True,
            status_tip=None,
            whats_this=None,
            parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToRasterMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/terraqube_cloud/resources/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Terraqube Hyperspectral Cloud'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginRasterMenu(
                self.tr(u'&Terraqube Hyperspectral Cloud'),
                action)
            self.iface.removeToolBarIcon(action)

        # Delete all temporary files used to download
        # hiperqube thumbnails and raster images
        for filename in self.temp_filenames:
            try:
                os.remove(filename)
            except:
                pass

    def set_busy_cursor(self):
        """Sets the cursor to a busy cursor."""
        QApplication.instance().setOverrideCursor(Qt.WaitCursor)

    def restore_cursor(self):
        """Sets the cursor to a busy cursor."""
        QApplication.instance().restoreOverrideCursor()

    def download_file(self, uri):
        """Downloads a file and stores the filename for later deletion."""
        filename = self.cloudqube.download_file(uri)
        self.temp_filenames.append(filename)
        return filename

    def switch_signature(self, signature, visibility):
        """Shows or hides a signature from the map canvas."""
        layer = self.find_layer(signature['hiperqubeId'])
        if not layer:
            layer = self.show_hiperqube()
        if layer:
            self.iface.setActiveLayer(layer)
            layer.set_signature_visibility(signature, visibility)
        else:
            self.iface.messageBar().pushCritical("Failure", "Couldn't create raster layer.")

    def create_signature_callback(self, hiperqube_id, row, col):
        """Creates a signature for the given hiperqube_id."""
        self.set_busy_cursor()
        try:
            signature = self.cloudqube.create_signature(hiperqube_id, row, col)
            if signature:
                layer = self.find_layer(signature['hiperqubeId'])
                if not layer:
                    layer = self.show_hiperqube()
                if layer:
                    self.iface.setActiveLayer(layer)
                    layer.add_signature(signature)
                    self.append_signature_row(signature, Qt.Checked)
                else:
                    self.iface.messageBar().pushCritical("Failure", "Couldn't create raster layer.")
            else:
                self.iface.messageBar().pushCritical(
                    "Failure", "Couldn't create signature")
        except Exception as err:
            self.iface.messageBar().pushCritical(
                "Failure", "Couldn't create signature: {0}".format(err))
        self.restore_cursor()

    def find_layer(self, hiperqube_id):
        """Returns the layer corresponding to this hiperqube id or None if none found."""
        for layer in QgsProject.instance().mapLayers().values():
            if isinstance(layer, HiperqubeRasterLayer):
                if layer.hiperqube_id() == hiperqube_id:
                    return layer
        return None

    def create_signature(self):
        """Activates create signature tool."""
        hiperqube_id = self.hiperqube['id']
        layer = self.find_layer(hiperqube_id)
        if not layer:
            layer = self.show_hiperqube()
        if layer:
            self.iface.setActiveLayer(layer)
            canvas = self.iface.mapCanvas()
            tool = SignatureTool(canvas, layer, hiperqube_id,
                                 self.create_signature_callback)
            canvas.setMapTool(tool)
        else:
            self.iface.messageBar().pushCritical(
                "Failure", "Couldn't create raster layer.")

    def fill_projects_combo(self, projects):
        """Initializes the project table with the projects retrieved from the server."""
        self.dlg.projectsComboBox.clear()
        icon = QIcon(':/plugins/terraqube_cloud/resources/folder.svg')
        for project in projects:
            self.dlg.projectsComboBox.addItem(
                icon, '{0} - {1}'.format(project['name'], project['createdDate']))
        self.dlg.projectsComboBox.setEnabled(True)
        self.dlg.addProjectButton.setEnabled(True)

    def get_hiperqube_status(self, status):
        """Shows the appropriate string depending on the status."""
        if status != 'READY':
            return 'Preparing'
        else:
            return 'Ready'

    def fill_hiperqube_table(self, hiperqubes):
        """Initializes the hiperqube table with the hiperqubes retrieved from the server."""
        self.dlg.hiperqubeTable.clearContents()
        self.dlg.hiperqubeTable.setRowCount(len(hiperqubes))
        i = 0
        for hiperqube in hiperqubes:
            self.dlg.hiperqubeTable.setItem(
                i, 0, QTableWidgetItem(hiperqube['name']))
            self.dlg.hiperqubeTable.setItem(
                i, 1, QTableWidgetItem(hiperqube['capturedDate']))
            self.dlg.hiperqubeTable.setItem(
                i, 2, QTableWidgetItem(hiperqube['lastModifiedDate']))
            self.dlg.hiperqubeTable.setItem(
                i, 3, QTableWidgetItem(format_size(hiperqube['size'])))
            self.dlg.hiperqubeTable.setItem(
                i, 4, QTableWidgetItem(self.get_hiperqube_status(hiperqube['status'])))
            i = i + 1
        self.dlg.hiperqubeTable.setEnabled(True)
        self.dlg.uploadHiperqubeButton.setEnabled(True)
        self.dlg.refreshHiperqubesButton.setEnabled(True)

    def sign_in(self):
        """Signs in a user to Terraqube Cloud."""
        self.dlg.signInButton.setEnabled(False)
        self.dlg.signInButton.setText('Signing In...')
        QApplication.processEvents()
        self.set_busy_cursor()
        server = self.dlg.serverInput.text().strip()
        username = self.dlg.usernameInput.text().strip()
        password = self.dlg.passwordInput.text().strip()
        if server and username and password:
            self.cloudqube = CloudqubeClient(server)
            try:
                self.cloudqube.login_user(username, password)
                self.iface.messageBar().pushSuccess("Success", "Signed in Terraqube Cloud!")
                try:
                    self.projects = self.cloudqube.get_projects()
                    self.fill_projects_combo(self.projects)
                    self.dlg.terraqubeTab.setCurrentWidget(self.dlg.hiperqubes)
                except Exception as err:
                    self.iface.messageBar().pushCritical(
                        "Failure", "Couldn't retrieve projects: {0}".format(err))
            except Exception as err:
                self.iface.messageBar().pushCritical(
                    "Failure", "Couldn't sign in to Terraqube Cloud: {0}".format(err))
        self.dlg.signInButton.setText('Sign In')
        self.dlg.signInButton.setEnabled(True)
        self.restore_cursor()

    def show_hiperqube(self, row=None, col=None):
        """Renders the selected hiperqube in a new raster layer."""
        if row:
            self.hiperqube = self.hiperqubes[row]
        hiperqube_id = self.hiperqube['id']
        self.set_busy_cursor()
        if not self.hiperqube_details or self.hiperqube_details['id'] != hiperqube_id:
            self.hiperqube_details = self.cloudqube.get_hiperqube_details(
                hiperqube_id)
        layer = self.find_layer(hiperqube_id)
        if not layer:
            try:
                name = '{0} / {1}'.format(
                    self.project['name'], self.hiperqube['name'])
                layer = HiperqubeRasterLayer(
                    self,
                    self.hiperqube_details['imageUrl'],
                    name,
                    self.iface.mapCanvas(),
                    hiperqube_id)
                QgsProject.instance().addMapLayer(layer)
            except Exception as err:
                self.iface.messageBar().pushCritical(
                    "Failure", "Couldn't download hiperqube raster: {0}.".format(err))
        self.dlg.signatureButton.setEnabled(True)
        self.restore_cursor()
        return layer

    def fill_hiperqube_details(self, hiperqube_details):
        """Fills all hiperqube details."""
        self.dlg.columnsValueLabel.setText(
            str(hiperqube_details['cols']))
        self.dlg.bandsValueLabel.setText(
            str(hiperqube_details['bands']))
        self.dlg.linesValueLabel.setText(
            str(hiperqube_details['lines']))
        min_value, max_value, avg_dist = get_wavelength_stats(
            array_str_to_float(hiperqube_details['wavelength']))
        self.dlg.minWavelengthValueLabel.setText(
            '{:.2f} nm'.format(min_value))
        self.dlg.maxWavelengthValueLabel.setText(
            '{:.2f} nm'.format(max_value))
        self.dlg.avgWavelengthDistValueLabel.setText(
            '{:.2f} nm'.format(avg_dist))
        try:
            filename = self.download_file(hiperqube_details['thumbnailUrl'])
            if filename:
                pixmap = QPixmap(filename).scaled(
                    THUMB_WIDTH, THUMB_HEIGHT, Qt.KeepAspectRatio, Qt.SmoothTransformation)
                self.dlg.thumbnailLabel.setPixmap(pixmap)
            else:
                self.dlg.thumbnailLabel.setPixmap(THUMB_MISSING_PIXMAP)
                self.iface.messageBar().pushCritical(
                    "Failure", "Couldn't download hiperqube thumbnail.")
        except Exception:
            self.dlg.thumbnailLabel.setPixmap(THUMB_MISSING_PIXMAP)
            self.iface.messageBar().pushCritical(
                "Failure", "Couldn't download hiperqube thumbnail.")

    def signature_cell_changed(self, row, col):
        """Signal when a signature cell is changed."""
        item = self.dlg.signaturesTable.item(row, col)
        item.notify()

    def append_signature_row(self, signature, state):
        count = self.dlg.signaturesTable.rowCount()
        self.dlg.signaturesTable.setRowCount(count + 1)
        item = SignatureTableWidgetItem(
            signature, state, self.switch_signature)
        self.dlg.signaturesTable.setItem(count, 0, item)

    def fill_signatures(self, signatures):
        """Fills all signatures from the list."""
        self.dlg.signaturesTable.clearContents()
        for signature in signatures:
            self.append_signature_row(signature, Qt.Unchecked)
        self.dlg.signaturesTable.cellChanged.connect(
            self.signature_cell_changed)
        self.dlg.signaturesTable.setEnabled(True)
        self.dlg.createSignatureButton.setEnabled(True)

    def clear_hiperqube_details(self):
        """Clears all hiperqube details."""
        self.dlg.columnsValueLabel.setText('-')
        self.dlg.bandsValueLabel.setText('-')
        self.dlg.linesValueLabel.setText('-')
        self.dlg.minWavelengthValueLabel.setText('-')
        self.dlg.maxWavelengthValueLabel.setText('-')
        self.dlg.avgWavelengthDistValueLabel.setText('-')
        self.dlg.thumbnailLabel.setPixmap(THUMB_MISSING_PIXMAP)

    def clear_signatures(self):
        self.dlg.signaturesTable.clearContents()
        self.dlg.signaturesTable.setEnabled(False)
        self.dlg.createSignatureButton.setEnabled(False)
        self.dlg.deleteSignatureButton.setEnabled(False)

    def select_hiperqube(self, current, previous):
        """Action to execute when a hiperqube is selected."""
        if current != previous:
            row = self.dlg.hiperqubeTable.currentRow()
            if row >= 0:
                self.hiperqube = self.hiperqubes[row]
                self.set_busy_cursor()
                self.hiperqube_details = self.cloudqube.get_hiperqube_details(
                    self.hiperqube['id'])
                self.fill_hiperqube_details(self.hiperqube_details)
                QApplication.processEvents()
                self.signatures = self.cloudqube.get_signatures(
                    self.hiperqube['id'])
                self.fill_signatures(self.signatures)
                self.dlg.showHiperqubeButton.setEnabled(True)
                self.restore_cursor()
            else:
                self.clear_hiperqube_details()
                self.dlg.showHiperqubeButton.setEnabled(False)
                self.dlg.signatureButton.setEnabled(False)

    def select_project(self, index):
        """Action to execute when a project is selected."""
        self.project = self.projects[index]
        self.refresh_hiperqubes()

    def update_hiperqube_upload_progress(self, bytes_transferred=None):
        # Total Size
        if self.upload_total_size:
            self.uh_dlg.totalSizeValueLabel.setText(
                format_size(self.upload_total_size))
        else:
            self.uh_dlg.totalSizeValueLabel.setText('-')

        # Total Transferred
        progress = None
        if bytes_transferred:
            if not self.upload_current_size:
                self.upload_current_size = 0
            self.upload_current_size = self.upload_current_size + bytes_transferred
            self.uh_dlg.totalTransferredValueLabel.setText(
                format_size(self.upload_current_size))
            progress = self.upload_current_size / self.upload_total_size
            self.uh_dlg.transferProgressBar.setValue(progress * 100)
            self.uh_dlg.transferProgressBar.setEnabled(True)
        else:
            if self.upload_current_size:
                progress = self.upload_current_size / self.upload_total_size
            else:
                self.uh_dlg.totalTransferredValueLabel.setText('-')
            self.uh_dlg.transferProgressBar.setEnabled(False)

        # Total Elapsed
        if self.upload_time_started:
            delta = datetime.now().replace(microsecond=0) - self.upload_time_started
            self.uh_dlg.totalElapsedTimeValueLabel.setText(str(delta))
            if progress:
                time_left = timedelta(seconds=int(
                    delta.total_seconds() / progress))
                self.uh_dlg.estimatedRemainingTimeValueLabel.setText(
                    str(time_left))
            else:
                self.uh_dlg.estimatedRemainingTimeValueLabel.setText(
                    '-- : -- : --')
        else:
            self.uh_dlg.totalElapsedTimeValueLabel.setText('-- : -- : --')
        QApplication.processEvents()

    def start_hiperqube_upload(self):
        """Action to execute to start uploading an hiperqube."""
        try:
            self.uh_dlg.uploadButton.setEnabled(False)
            self.uh_dlg.uploadButton.setText('Preparing...')
            QApplication.processEvents()
            self.uh_dlg.uploadButton.show()
            name = self.uh_dlg.hiperqubeNameLineEdit.text()
            capturedDate = self.uh_dlg.capturedDateDateTimeEdit.dateTime().toPyDateTime()
            filename = self.uh_dlg.hiperqubeFileWidget.filePath()
            hiperqube = self.cloudqube.create_hiperqube(
                self.project['id'], name, capturedDate)
            self.cloudqube.upload_hiperqube_hdr(
                hiperqube['id'], get_hdr_filename(filename))
            self.upload_time_started = datetime.now().replace(microsecond=0)
            self.uh_dlg.uploadButton.setText('Uploading...')
            QApplication.processEvents()
            self.cloudqube.upload_hiperqube_bil(
                hiperqube['uploadBilUrl'], hiperqube['uploadBilFields'], filename, self.update_hiperqube_upload_progress)
            self.iface.messageBar().pushSuccess("Success", "Transfer completed!")
            self.uh_dlg.uploadButton.setText('Done!')
            QApplication.processEvents()
            self.uh_dlg.accept()
        except Exception as err:
            self.iface.messageBar().pushCritical("Failure", str(err))
            self.uh_dlg.reject()

    def validate_upload_hiperqube_form(self):
        """Action to execute to validate whether the upload button should be enabled or not."""
        if (
            len(self.uh_dlg.hiperqubeNameLineEdit.text()) > 0 and
            self.uh_dlg.capturedDateDateTimeEdit.dateTime() and
            len(self.uh_dlg.hiperqubeFileWidget.filePath()) > 0
        ):
            self.uh_dlg.uploadButton.setEnabled(True)
        else:
            self.uh_dlg.uploadButton.setEnabled(False)

    def validate_upload_hiperqube_file(self):
        """Action to execute to validate that the file to upload is valid."""
        filename = self.uh_dlg.hiperqubeFileWidget.filePath()
        if len(filename) > 0:
            if os.path.exists(filename):
                hdr_filename = get_hdr_filename(filename)
                if os.path.exists(hdr_filename):
                    self.upload_total_size = os.path.getsize(filename)
                else:
                    self.iface.messageBar().pushCritical(
                        "Failure", "HDR file {0} missing!".format(hdr_filename))
                    self.uh_dlg.hiperqubeFileWidget.setFilePath(None)
            else:
                self.iface.messageBar().pushCritical("Failure", "File does not exist!")
                self.uh_dlg.hiperqubeFileWidget.setFilePath(None)
            self.update_hiperqube_upload_progress()
        self.validate_upload_hiperqube_form()

    def upload_hiperqube(self):
        """Action to execute when the upload hiperqube button is triggered."""
        self.uh_dlg = UploadHiperqubeDialog(self.dlg)

        self.uh_dlg.uploadButton = QPushButton("Upload")
        self.uh_dlg.uploadButton.setDefault(True)
        self.uh_dlg.uploadButton.clicked.connect(self.start_hiperqube_upload)
        self.uh_dlg.uploadButton.setEnabled(False)
        self.uh_dlg.uploadHiperqubeButtonBox.addButton(
            self.uh_dlg.uploadButton, QDialogButtonBox.ActionRole)

        self.uh_dlg.capturedDateDateTimeEdit.setMaximumDateTime(
            QDateTime.currentDateTime())
        self.uh_dlg.capturedDateDateTimeEdit.setAllowNull(True)
        self.uh_dlg.capturedDateDateTimeEdit.setEmpty()

        self.uh_dlg.hiperqubeNameLineEdit.editingFinished.connect(
            self.validate_upload_hiperqube_form)
        self.uh_dlg.capturedDateDateTimeEdit.valueChanged.connect(
            self.validate_upload_hiperqube_form)
        self.uh_dlg.hiperqubeFileWidget.fileChanged.connect(
            self.validate_upload_hiperqube_file)

        if self.uh_dlg.exec_() == QDialog.Accepted:
            self.select_project(self.dlg.projectsComboBox.currentIndex())

        self.upload_total_size = None
        self.upload_current_size = None
        self.upload_time_started = None

    def refresh_hiperqubes(self):
        """Refreshes the list of hiperqubes."""
        self.set_busy_cursor()
        self.hiperqubes = self.cloudqube.get_hiperqubes(self.project['id'])
        self.fill_hiperqube_table(self.hiperqubes)
        self.restore_cursor()

    def init_account_tab(self):
        """Initializes the Account tab."""
        self.dlg.signInButton.clicked.connect(self.sign_in)

    def init_projects_group_box(self):
        """Initializes the Projects GroupBox."""
        self.dlg.projectsComboBox.currentIndexChanged.connect(
            self.select_project)

    def init_hiperqubes_group_box(self):
        """Initializes the Hiperqubes GroupBox."""
        headers = ['Name', 'Capture Date',
                   'Last Modified Date', 'Size', 'Status']
        self.dlg.hiperqubeTable.setColumnCount(len(headers))
        self.dlg.hiperqubeTable.setHorizontalHeaderLabels(headers)
        self.dlg.hiperqubeTable.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.dlg.hiperqubeTable.currentItemChanged.connect(
            self.select_hiperqube)
        self.dlg.hiperqubeTable.cellDoubleClicked.connect(
            self.show_hiperqube)
        self.dlg.uploadHiperqubeButton.clicked.connect(self.upload_hiperqube)
        self.dlg.refreshHiperqubesButton.clicked.connect(
            self.refresh_hiperqubes)
        self.dlg.showHiperqubeButton.clicked.connect(self.show_hiperqube)
        self.dlg.signatureButton.clicked.connect(self.create_signature)

    def init_hiperqube_details_group_box(self):
        """Initializes the Hiperqube Details GroupBox."""
        self.dlg.thumbnailLabel.setPixmap(THUMB_MISSING_PIXMAP)
        headers = ['Signature (col, line)']
        self.dlg.signaturesTable.setColumnCount(len(headers))
        self.dlg.signaturesTable.setHorizontalHeaderLabels(headers)
        self.dlg.hiperqubeTable.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)

    def init_hiperqubes_tab(self):
        """Initializes the Hiperqubes tab."""
        self.init_projects_group_box()
        self.init_hiperqubes_group_box()
        self.init_hiperqube_details_group_box()

    def layer_removed(self, layer_id):
        layer = QgsProject.instance().mapLayer(layer_id)
        if layer:
            if isinstance(layer, HiperqubeRasterLayer):
                layer.unload()

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = TerraqubeCloudDialog()
            self.init_account_tab()
            self.init_hiperqubes_tab()
            self.dlg.terraqubeTab.setCurrentIndex(0)
            QgsProject.instance().layerWillBeRemoved.connect(self.layer_removed)

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
