# -*- coding: utf-8 -*-
"""
/***************************************************************************
 TerraqubeCloud
                                 A QGIS plugin
 This plugin provides access to hyperspectral images from Terraqube Cloud.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-02-10
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Terraqube S.L.
        email                : arnau@terraqube.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os.path

from .cloudqube_client import CloudqubeClient
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QDateTime, Qt, QSize
from qgis.PyQt.QtGui import QIcon, QPixmap, QImage, QPainter, QColor
from qgis.PyQt.QtWidgets import QAction, QTableWidgetItem, QHeaderView, QPushButton, QDialogButtonBox, QDialog, QApplication
from qgis.PyQt.QtSvg import QSvgRenderer
from qgis.core import QgsMessageLog, Qgis

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .terraqube_cloud_dialog import TerraqubeCloudDialog
from .upload_hiperqube_dialog import UploadHiperqubeDialog
from .util import get_hdr_filename, get_wavelength_stats, array_str_to_float
from datetime import datetime, timedelta


THUMB_WIDTH = 256
THUMB_HEIGHT = 256  
THUMB_MISSING_RESOURCE = ':/plugins/terraqube_cloud/resources/exclamation-triangle.svg'
THUMB_SIZE = QSize(THUMB_WIDTH, THUMB_HEIGHT)
ICON_COLOR = QColor('lightGray')

def get_colored_pixmap(filename, color, size):
    """Returns a colored pixmap of given size."""
    pixmap = QPixmap(filename).scaled(size, Qt.KeepAspectRatio, Qt.SmoothTransformation)
    image = QImage(pixmap.width(), pixmap.height(), QImage.Format_ARGB32_Premultiplied)

    image.fill(color)
    
    painter = QPainter(image)
    painter.setCompositionMode(QPainter.CompositionMode_DestinationIn)
    painter.drawPixmap(0, 0, pixmap)
    painter.end()

    return QPixmap.fromImage(image)

class TerraqubeCloud:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'TerraqubeCloud_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Terraqube Hyperspectral Cloud')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

        self.upload_total_size = None
        self.upload_current_size = None
        self.upload_time_started = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('TerraqubeCloud', message)

    def add_action(
            self,
            icon_path,
            text,
            callback,
            enabled_flag=True,
            add_to_menu=True,
            add_to_toolbar=True,
            status_tip=None,
            whats_this=None,
            parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToRasterMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/terraqube_cloud/resources/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Terraqube Hyperspectral Cloud'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginRasterMenu(
                self.tr(u'&Terraqube Hyperspectral Cloud'),
                action)
            self.iface.removeToolBarIcon(action)

    def formatSize(self, size, suffix='B'):
        """Formats the size of a hiperqube."""
        for unit in ['', 'Ki', 'Mi', 'Gi', 'Ti', 'Pi', 'Ei', 'Zi']:
            if abs(size) < 1024.0:
                return "%3.1f%s%s" % (size, unit, suffix)
            size /= 1024.0
        return "%.1f%s%s" % (size, 'Yi', suffix)

    def fillProjectsCombo(self, projects):
        """Initializes the project table with the projects retrieved from the server."""
        self.dlg.projectsComboBox.clear()
        icon = QIcon(':/plugins/terraqube_cloud/resources/folder.svg')
        for project in projects:
            self.dlg.projectsComboBox.addItem(
                icon, '{0} - {1}'.format(project['name'], project['createdDate']))
        self.dlg.projectsComboBox.setEnabled(True)
        self.dlg.addProjectButton.setEnabled(True)

    def getHiperqubeStatus(self, status):
        """Shows the appropriate string depending on the status."""
        if status != 'READY':
            return 'Preparing'
        else:
            return 'Ready'

    def fillHiperqubeTable(self, hiperqubes):
        """Initializes the hiperqube table with the hiperqubes retrieved from the server."""
        self.dlg.hiperqubeTable.clearContents()
        self.dlg.columnsValueLabel.setText('-')
        self.dlg.bandsValueLabel.setText('-')
        self.dlg.linesValueLabel.setText('-')
        self.dlg.minWavelengthValueLabel.setText('-')
        self.dlg.maxWavelengthValueLabel.setText('-')
        self.dlg.avgWavelengthDistValueLabel.setText('-')
        self.dlg.hiperqubeTable.setRowCount(len(hiperqubes))
        i = 0
        for hiperqube in hiperqubes:
            self.dlg.hiperqubeTable.setItem(
                i, 0, QTableWidgetItem(hiperqube['name']))
            self.dlg.hiperqubeTable.setItem(
                i, 1, QTableWidgetItem(hiperqube['capturedDate']))
            self.dlg.hiperqubeTable.setItem(
                i, 2, QTableWidgetItem(hiperqube['lastModifiedDate']))
            self.dlg.hiperqubeTable.setItem(
                i, 3, QTableWidgetItem(self.formatSize(hiperqube['size'])))
            self.dlg.hiperqubeTable.setItem(
                i, 4, QTableWidgetItem(self.getHiperqubeStatus(hiperqube['status'])))
            i = i + 1
        self.dlg.hiperqubeTable.setEnabled(True)
        self.dlg.uploadHiperqubeButton.setEnabled(True)

    def sign_in(self):
        """Signs in a user to Terraqube Cloud."""
        server = self.dlg.serverInput.text().strip()
        username = self.dlg.usernameInput.text().strip()
        password = self.dlg.passwordInput.text().strip()
        if server and username and password:
            self.cloudqube = CloudqubeClient(server)
            try:
                self.cloudqube.login_user(username, password)
                self.iface.messageBar().pushSuccess("Success", "Signed in Terraqube Cloud!")
                try:
                    self.projects = self.cloudqube.get_projects()
                    self.fillProjectsCombo(self.projects)
                    self.dlg.terraqubeTab.setCurrentWidget(self.dlg.hiperqubes)
                except Exception as err:
                    self.iface.messageBar().pushCritical(
                        "Failure", "Couldn't retrieve projects: {0}".format(err))
            except Exception as err:
                self.iface.messageBar().pushCritical(
                    "Failure", "Couldn't sign in to Terraqube Cloud: {0}".format(err))

    def select_hiperqube(self, row, col):
        """Action to execute when a hiperqube is selected."""
        self.hiperqube = self.hiperqubes[row]
        self.hiperqube_details = self.cloudqube.get_hiperqube_details(
            self.hiperqube['id'])
        self.dlg.columnsValueLabel.setText(str(self.hiperqube_details['cols']))
        self.dlg.bandsValueLabel.setText(str(self.hiperqube_details['bands']))
        self.dlg.linesValueLabel.setText(str(self.hiperqube_details['lines']))
        min_value, max_value, avg_dist = get_wavelength_stats(
            array_str_to_float(self.hiperqube_details['wavelength']))
        self.dlg.minWavelengthValueLabel.setText('{:.2f} nm'.format(min_value))
        self.dlg.maxWavelengthValueLabel.setText('{:.2f} nm'.format(max_value))
        self.dlg.avgWavelengthDistValueLabel.setText('{:.2f} nm'.format(avg_dist))

        try:    
            filename = self.cloudqube.download_file(self.hiperqube_details['thumbnailUrl'])
            if filename:
                pixmap = QPixmap(filename).scaled(THUMB_WIDTH, THUMB_HEIGHT, Qt.KeepAspectRatio, Qt.SmoothTransformation)
                self.dlg.thumbnailLabel.setPixmap(pixmap)
            else:
                pixmap = get_colored_pixmap(THUMB_MISSING_RESOURCE, ICON_COLOR, THUMB_SIZE)
                self.dlg.thumbnailLabel.setPixmap(pixmap)
        except Exception as err:
                self.iface.messageBar().pushCritical(
                    "Failure", "Couldn't sign in to Terraqube Cloud: {0}".format(err))

    def select_project(self, index):
        """Action to execute when a project is selected."""
        self.project = self.projects[index]
        self.hiperqubes = self.cloudqube.get_hiperqubes(self.project['id'])
        self.fillHiperqubeTable(self.hiperqubes)

    def update_hiperqube_upload_progress(self, bytes_transferred=None):
        # Total Size
        if self.upload_total_size:
            self.uh_dlg.totalSizeValueLabel.setText(
                self.formatSize(self.upload_total_size))
        else:
            self.uh_dlg.totalSizeValueLabel.setText('-')

        # Total Transferred
        progress = None
        if bytes_transferred:
            if not self.upload_current_size:
                self.upload_current_size = 0
            self.upload_current_size = self.upload_current_size + bytes_transferred
            self.uh_dlg.totalTransferredValueLabel.setText(
                self.formatSize(self.upload_current_size))
            progress = self.upload_current_size / self.upload_total_size
            self.uh_dlg.transferProgressBar.setValue(progress * 100)
            self.uh_dlg.transferProgressBar.setEnabled(True)
        else:
            if self.upload_current_size:
                progress = self.upload_current_size / self.upload_total_size
            else:
                self.uh_dlg.totalTransferredValueLabel.setText('-')
            self.uh_dlg.transferProgressBar.setEnabled(False)

        # Total Elapsed
        if self.upload_time_started:
            delta = datetime.now().replace(microsecond=0) - self.upload_time_started
            self.uh_dlg.totalElapsedTimeValueLabel.setText(str(delta))
            if progress:
                time_left = timedelta(seconds=int(
                    delta.total_seconds() / progress))
                self.uh_dlg.estimatedRemainingTimeValueLabel.setText(
                    str(time_left))
            else:
                self.uh_dlg.estimatedRemainingTimeValueLabel.setText(
                    '-- : -- : --')
        else:
            self.uh_dlg.totalElapsedTimeValueLabel.setText('-- : -- : --')
        QApplication.processEvents()

    def start_hiperqube_upload(self):
        """Action to execute to start uploading an hiperqube."""
        try:
            self.uh_dlg.uploadButton.setEnabled(False)
            self.uh_dlg.uploadButton.setText('Preparing...')
            QApplication.processEvents()
            self.uh_dlg.uploadButton.show()
            name = self.uh_dlg.hiperqubeNameLineEdit.text()
            capturedDate = self.uh_dlg.capturedDateDateTimeEdit.dateTime().toPyDateTime()
            filename = self.uh_dlg.hiperqubeFileWidget.filePath()
            hiperqube = self.cloudqube.create_hiperqube(
                self.project['id'], name, capturedDate)
            self.cloudqube.upload_hiperqube_hdr(
                hiperqube['id'], get_hdr_filename(filename))
            self.upload_time_started = datetime.now().replace(microsecond=0)
            self.uh_dlg.uploadButton.setText('Uploading...')
            QApplication.processEvents()
            self.cloudqube.upload_hiperqube_bil(
                hiperqube['uploadBilUrl'], hiperqube['uploadBilFields'], filename, self.update_hiperqube_upload_progress)
            self.iface.messageBar().pushSuccess("Success", "Transfer completed!")
            self.uh_dlg.uploadButton.setText('Done!')
            QApplication.processEvents()
            self.uh_dlg.accept()
        except Exception as err:
            self.iface.messageBar().pushCritical("Failure", str(err))
            self.uh_dlg.reject()

    def validate_upload_hiperqube_form(self):
        """Action to execute to validate whether the upload button should be enabled or not."""
        if (
            len(self.uh_dlg.hiperqubeNameLineEdit.text()) > 0 and
            self.uh_dlg.capturedDateDateTimeEdit.dateTime() and
            len(self.uh_dlg.hiperqubeFileWidget.filePath()) > 0
        ):
            self.uh_dlg.uploadButton.setEnabled(True)
        else:
            self.uh_dlg.uploadButton.setEnabled(False)

    def validate_upload_hiperqube_file(self):
        """Action to execute to validate that the file to upload is valid."""
        filename = self.uh_dlg.hiperqubeFileWidget.filePath()
        if len(filename) > 0:
            if os.path.exists(filename):
                hdr_filename = get_hdr_filename(filename)
                if os.path.exists(hdr_filename):
                    self.upload_total_size = os.path.getsize(filename)
                else:
                    self.iface.messageBar().pushCritical(
                        "Failure", "HDR file {0} missing!".format(hdr_filename))
                    self.uh_dlg.hiperqubeFileWidget.setFilePath(None)
            else:
                self.iface.messageBar().pushCritical("Failure", "File does not exist!")
                self.uh_dlg.hiperqubeFileWidget.setFilePath(None)
            self.update_hiperqube_upload_progress()
        self.validate_upload_hiperqube_form()

    def upload_hiperqube(self):
        """Action to execute when the upload hiperqube button is triggered."""
        self.uh_dlg = UploadHiperqubeDialog(self.dlg)

        self.uh_dlg.uploadButton = QPushButton("Upload")
        self.uh_dlg.uploadButton.setDefault(True)
        self.uh_dlg.uploadButton.clicked.connect(self.start_hiperqube_upload)
        self.uh_dlg.uploadButton.setEnabled(False)
        self.uh_dlg.uploadHiperqubeButtonBox.addButton(
            self.uh_dlg.uploadButton, QDialogButtonBox.ActionRole)

        self.uh_dlg.capturedDateDateTimeEdit.setMaximumDateTime(
            QDateTime.currentDateTime())
        self.uh_dlg.capturedDateDateTimeEdit.setAllowNull(True)
        self.uh_dlg.capturedDateDateTimeEdit.setEmpty()

        self.uh_dlg.hiperqubeNameLineEdit.editingFinished.connect(
            self.validate_upload_hiperqube_form)
        self.uh_dlg.capturedDateDateTimeEdit.valueChanged.connect(
            self.validate_upload_hiperqube_form)
        self.uh_dlg.hiperqubeFileWidget.fileChanged.connect(
            self.validate_upload_hiperqube_file)

        if self.uh_dlg.exec_() == QDialog.Accepted:
            self.select_project(self.dlg.projectsComboBox.currentIndex())

        self.upload_total_size = None
        self.upload_current_size = None
        self.upload_time_started = None

    def initAccountTab(self):
        """Initializes the Account tab."""
        self.dlg.signInButton.clicked.connect(self.sign_in)

    def initProjectsGroupBox(self):
        """Initializes the Projects GroupBox."""
        self.dlg.projectsComboBox.currentIndexChanged.connect(
            self.select_project)

    def initHiperqubesGroupBox(self):
        """Initializes the Hiperqubes GroupBox."""
        headers = ['Name', 'Capture Date',
                   'Last Modified Date', 'Size', 'Status']
        self.dlg.hiperqubeTable.setColumnCount(len(headers))
        self.dlg.hiperqubeTable.setHorizontalHeaderLabels(headers)
        self.dlg.hiperqubeTable.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.dlg.hiperqubeTable.cellClicked.connect(
            self.select_hiperqube)
        self.dlg.uploadHiperqubeButton.clicked.connect(self.upload_hiperqube)

    def initHiperqubeDetailsGroupBox(self):
        """Initializes the Hiperqube Details GroupBox."""
        pixmap = get_colored_pixmap(THUMB_MISSING_RESOURCE, ICON_COLOR, THUMB_SIZE)
        self.dlg.thumbnailLabel.setPixmap(pixmap)

    def initHiperqubesTab(self):
        """Initializes the Hiperqubes tab."""
        self.initProjectsGroupBox()
        self.initHiperqubesGroupBox()
        self.initHiperqubeDetailsGroupBox()

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = TerraqubeCloudDialog()
            self.initAccountTab()
            self.initHiperqubesTab()
            self.dlg.terraqubeTab.setCurrentIndex(0)

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
